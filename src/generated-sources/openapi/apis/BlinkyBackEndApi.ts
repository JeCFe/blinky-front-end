/* tslint:disable */
/* eslint-disable */
/**
 * Blinky-Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllDesksResponse,
  Desk,
} from '../models';
import {
    AllDesksResponseFromJSON,
    AllDesksResponseToJSON,
    DeskFromJSON,
    DeskToJSON,
} from '../models';

export interface AddDeskPostRequest {
    desk: Desk;
}

export interface BookDeskPostRequest {
    deskId: string;
    assignedName: string;
}

export interface RemoveBookingPostRequest {
    desk: Desk;
}

/**
 * 
 */
export class BlinkyBackEndApi extends runtime.BaseAPI {

    /**
     */
    async addDeskPostRaw(requestParameters: AddDeskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.desk === null || requestParameters.desk === undefined) {
            throw new runtime.RequiredError('desk','Required parameter requestParameters.desk was null or undefined when calling addDeskPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/AddDesk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeskToJSON(requestParameters.desk),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addDeskPost(requestParameters: AddDeskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addDeskPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async allDesksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllDesksResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/AllDesks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllDesksResponseFromJSON(jsonValue));
    }

    /**
     */
    async allDesksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllDesksResponse> {
        const response = await this.allDesksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async bookDeskPostRaw(requestParameters: BookDeskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deskId === null || requestParameters.deskId === undefined) {
            throw new runtime.RequiredError('deskId','Required parameter requestParameters.deskId was null or undefined when calling bookDeskPost.');
        }

        if (requestParameters.assignedName === null || requestParameters.assignedName === undefined) {
            throw new runtime.RequiredError('assignedName','Required parameter requestParameters.assignedName was null or undefined when calling bookDeskPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.deskId !== undefined) {
            queryParameters['DeskId'] = requestParameters.deskId;
        }

        if (requestParameters.assignedName !== undefined) {
            queryParameters['AssignedName'] = requestParameters.assignedName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/BookDesk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bookDeskPost(requestParameters: BookDeskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bookDeskPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeBookingPostRaw(requestParameters: RemoveBookingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.desk === null || requestParameters.desk === undefined) {
            throw new runtime.RequiredError('desk','Required parameter requestParameters.desk was null or undefined when calling removeBookingPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/RemoveBooking`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeskToJSON(requestParameters.desk),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeBookingPost(requestParameters: RemoveBookingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeBookingPostRaw(requestParameters, initOverrides);
    }

}
